{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/create-to-do/create-to-do.component.ts","webpack:///src/app/create-to-do/create-to-do.component.html","webpack:///src/app/done-list/done-list.component.ts","webpack:///src/app/to-do-list/to-do-list.component.ts","webpack:///src/app/to-do-list/to-do-list.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///src/services/todo-task.service.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","CreateToDoComponent","formBuilder","_taskService","submitted","showToDoList","showCreateToDo","newTask","taskForm","group","taskName","required","taskDescription","compose","maxLength","repeatingTask","valid","createTask","value","subscribe","isCreated","fire","reset","DoneListComponent","showToDoComp","allToDo","allDone","doneList","toDoList","createToDo","index","push","indexT","indexOf","splice","emit","ToDoListComponent","displayedColumns","showDoneList","showDoneComp","isActive","dataSource","paginator","sort","addTask","environment","production","bootstrapModule","err","console","error","TodoTaskService","task","providedIn"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaC,Y,GALb;AAAA;;AAME,WAAAC,KAAA,GAAQ,WAAR;AACD,K;;;uBAFYD,Y;AAAY,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA;AAAA;ACPzB;;;;;;;;;sEDOaA,Y,EAAY;cALxB,uDAKwB;eALd;AACTE,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;AEPzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAuCaC,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBALT,CACT,+EADS,C;AAEV,gBAbQ,CACP,4FADO,EAEP,uEAFO,EAGP,2DAHO,EAIP,mEAJO,EAKP,sEALO,EAMP,8EANO,EAOP,2FAPO,EAQP,oEARO,EASP,sEATO,CAaR;;;;0HAGUA,S,EAAS;AAAA,uBArBlB,2DAqBkB,EApBlB,wFAoBkB,EAnBlB,mFAmBkB,EAlBlB,iFAkBkB;AAlBD,kBAGjB,4FAHiB,EAIjB,uEAJiB,EAKjB,2DALiB,EAMjB,mEANiB,EAOjB,sEAPiB,EAQjB,8EARiB,EASjB,2FATiB,EAUjB,oEAViB,EAWjB,sEAXiB;AAkBC,O;AAPJ,K;;;;;sEAOLA,S,EAAS;cAvBrB,sDAuBqB;eAvBZ;AACRC,sBAAY,EAAE,CACZ,2DADY,EAEZ,wFAFY,EAGZ,mFAHY,EAIZ,iFAJY,CADN;AAORC,iBAAO,EAAE,CACP,4FADO,EAEP,uEAFO,EAGP,2DAHO,EAIP,mEAJO,EAKP,sEALO,EAMP,8EANO,EAOP,2FAPO,EAQP,oEARO,EASP,sEATO,CAPD;AAkBRC,mBAAS,EAAE,CACT,+EADS,CAlBH;AAqBRC,mBAAS,EAAE,CAAC,2DAAD;AArBH,S;AAuBY,Q;;;;;;;;;;;;;;;;;;ACvCtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AC2BoC;;AACA;;AACA;;;;;;AAHJ;;AACI;;AAGJ;;;;;;AAHS;;AAAA;;;;;;AAcL;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AANJ;;AACI;;AAGA;;AAGJ;;;;;;AANS;;AAAA;;AAGA;;AAAA;;;;;;AAmBL;;AACI;;AACJ;;;;;;AAHJ;;AACI;;AAGJ;;;;;;AAHS;;AAAA;;;;;;;;AA/DzC;;AACA;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAAO;;AAAS;;AAChB;;AACI;;AAAmF;AAAA;;AAAA;;AAAA;AAAA;;AAAnF;;AACJ;;AACA;;AAKJ;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AAAkB;;AAAgB;;AAClC;;AACI;;AACmB;AAAA;;AAAA;;AAAA;AAAA;;AAAoB;;AACvC;;AAQJ;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AAAQ;;AAAe;;AACvB;;AACI;;AAA6D;AAAA;;AAAA;;AAAA;AAAA;;AACzD;;AAA0C;;AAAW;;AACrD;;AAAkB;;AAAC;;AACnB;;AAAkB;;AAAC;;AACvB;;AACJ;;AACA;;AAKJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACA;;;;;;AA1DkB;;AAAA;;AASmB;;AAAA;;AAcA;;AAAA;;AAsBA;;AAAA;;;;;;;;AAcrC;;AAAqC;AAAA;;AAAA;;AAAA;AAAA;;AAAyB;;;;QD1DjDC,mB;AAMX,mCAAqBC,WAArB,EACUC,YADV,EACwC;AAAA;;AADnB,aAAAD,WAAA,GAAAA,WAAA;AACX,aAAAC,YAAA,GAAAA,YAAA;AALV,aAAAC,SAAA,GAAqB,KAArB;AACA,aAAAC,YAAA,GAAwB,KAAxB;AACA,aAAAC,cAAA,GAAwB,IAAxB;AACA,aAAAC,OAAA,GAAgB,KAAhB;AAE2C;;;;mCAEhC;AACT,eAAKC,QAAL,GAAgB,KAAKN,WAAL,CAAiBO,KAAjB,CAAuB;AACrCC,oBAAQ,EAAC,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,CAAC,0DAAWC,QAAZ,CAApB,CAD4B;AAErCC,2BAAe,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAmB,0DAAWC,OAAX,CAAmB,CAAC,0DAAWF,QAAZ,EAAsB,0DAAWG,SAAX,CAAqB,GAArB,CAAtB,CAAnB,CAAnB,CAFoB;AAGrCC,yBAAa,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,CAAC,0DAAWJ,QAAZ,CAApB;AAHsB,WAAvB,CAAhB;AAKD;;;mCACO;AAAA;;AACN,eAAKP,SAAL,GAAiB,IAAjB;;AACA,cAAG,KAAKA,SAAL,IAAkB,KAAKI,QAAL,CAAcQ,KAAnC,EAAyC;AACvC,iBAAKb,YAAL,CAAkBc,UAAlB,CAA6B,KAAKT,QAAL,CAAcU,KAA3C,EAAkDC,SAAlD,CAA4D,UAACC,SAAD,EAAa;AACvE,kBAAGA,SAAH,EAAa;AACX,mEAAKC,IAAL,CACE,eADF,EAEE,uCAFF,EAGE,SAHF;;AAKN,qBAAI,CAACb,QAAL,CAAcc,KAAd;;AACA,qBAAI,CAAClB,SAAL,GAAe,KAAf;AACC,qBAAI,CAACC,YAAL,GAAkB,IAAlB;AACA,qBAAI,CAACC,cAAL,GAAoB,KAApB;AACI;AACF,aAZD;AAaD;AACF;;;qCACS;AACR,eAAKD,YAAL,GAAkB,KAAlB;AACA,eAAKC,cAAL,GAAoB,IAApB;AACD;;;;;;;uBArCUL,mB,EAAmB,2H,EAAA,+I;AAAA,K;;;YAAnBA,mB;AAAmB,uC;AAAA,c;AAAA,a;AAAA,46B;AAAA;AAAA;AClBhC;;AA4EA;;;;AA5E0B;;AA4EV;;AAAA;;;;;;;;;sED1DHA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACTR,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;;;AElBhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQa4B,iB;AAKX,iCAAoBpB,YAApB,EAAkD;AAAA;;AAA9B,aAAAA,YAAA,GAAAA,YAAA;AAHX,aAAAqB,YAAA,GAAc,IAAI,0DAAJ,EAAd;AACV,aAAAC,OAAA,GAAY,EAAZ;AACC,aAAAC,OAAA,GAAY,EAAZ;AACqD;;;;mCAC1C;AACT,eAAKA,OAAL,GAAa,KAAKvB,YAAL,CAAkBwB,QAA/B;AACA,eAAKF,OAAL,GAAa,KAAKtB,YAAL,CAAkByB,QAA/B;AACA,eAAKC,UAAL,CAAgB,KAAKC,KAArB;AACD;;;mCACUA,K,EAAK;AACd,eAAKL,OAAL,CAAaM,IAAb,CAAkB,KAAKL,OAAL,CAAaI,KAAb,CAAlB;AACA,eAAK3B,YAAL,CAAkByB,QAAlB,GAA2B,KAAKH,OAAhC;AACA,eAAKC,OAAL,CAAaI,KAAb,IAAoB,IAApB;AACC,cAAME,MAAM,GAAG,KAAKN,OAAL,CAAaO,OAAb,CAAqB,IAArB,CAAf;;AACD,cAAID,MAAM,GAAG,CAAC,CAAd,EAAiB;AACf,iBAAKN,OAAL,CAAaQ,MAAb,CAAoBF,MAApB,EAA4B,CAA5B;AACD;;AACD,eAAK7B,YAAL,CAAkBwB,QAAlB,GAA2B,KAAKD,OAAhC;AACA,eAAKF,YAAL,CAAkBW,IAAlB;AACD;;;;;;;uBArBUZ,iB,EAAiB,+I;AAAA,K;;;YAAjBA,iB;AAAiB,oC;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,+D;AAAA;;;;;sEAAjBA,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACT9B,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKmB,Q;;;;;;gBAC5B;;;gBACA;;;;;;;;;;;;;;;;;;;;ACVF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACQoB;;AAA0D;AAAA;;AAAA;;AAAA;AAAA;;AAA8C;;AAAW;;;;;;AAU/G;;AAAuC;;AAAiC;;;;;;AAAjC;;AAAA;;;;;;;;AAI7B;;AAA+E;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAA/E;;;;;;;;AACA;;AAA8E;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAA9E;;;;;;AAJV;;AACI;;AACI;;AACE;;AACA;;AACA;;AACE;;AACF;;AACF;;AACF;;AACJ;;;;;;AAPiE;;AAAA;;AACA;;AAAA;;;;;;AASrE;;AAAuD;;AAAU;;;;;;AAChE;;AAAqC;;AAAkB;;;;;;AAAlB;;AAAA;;;;;;AAGtC;;AAAuD;;AAAgB;;;;;;AACtE;;AAAqC;;AAAyB;;;;;;AAAzB;;AAAA;;;;;;AAGpC;;AAAsD;;AAAe;;;;;;AACpE;;AAAqC;;AAAuB;;;;;;AAAvB;;AAAA;;;;;;AAE1C;;;;;;AACA;;;;;;;;AAWlB;;AAAoD;AAAA;;AAAA;;AAAA;AAAA;;AAAgC;;;;;;AAAhD;;;;;;;;QD5CzByC,iB;AAUX,iCAAoBjC,YAApB,EAAkD;AAAA;;AAA9B,aAAAA,YAAA,GAAAA,YAAA;AAPpB,aAAAkC,gBAAA,GAA6B,CAAC,QAAD,EAAU,UAAV,EAAqB,iBAArB,EAAuC,eAAvC,CAA7B;AAEU,aAAA9B,OAAA,GAAU,IAAI,0DAAJ,EAAV;AACV,aAAAqB,QAAA,GAAa,EAAb;AACA,aAAAU,YAAA,GAAqB,KAArB;AAEA,aAAAC,YAAA,GAAqB,KAArB;AAEA,aAAAd,OAAA,GAAY,EAAZ;AACA,aAAAC,OAAA,GAAY,EAAZ;AACA,aAAAc,QAAA,GAAiB,KAAjB;AAHqD;;;;mCAI7C;AACN,eAAKd,OAAL,GAAa,KAAKvB,YAAL,CAAkBwB,QAA/B;AACA,eAAKF,OAAL,GAAa,KAAKtB,YAAL,CAAkByB,QAA/B;AACA,eAAKa,UAAL,GAAkB,IAAI,0EAAJ,CAAuB,KAAKhB,OAA5B,CAAlB;AACA,eAAKgB,UAAL,CAAgBC,SAAhB,GAA4B,KAAKA,SAAjC;AACA,eAAKD,UAAL,CAAgBE,IAAhB,GAAuB,KAAKA,IAA5B;AACD;;;kCACM;AACP,eAAKpC,OAAL,CAAa4B,IAAb;AACC;;;iCACQL,K,EAAK;AACZ,eAAKS,YAAL,GAAkB,KAAlB;;AACA,cAAG,CAAC,KAAKD,YAAT,EAAsB;AACtB,iBAAKZ,OAAL,CAAaK,IAAb,CAAkB,KAAKN,OAAL,CAAaK,KAAb,CAAlB;AACA,iBAAK3B,YAAL,CAAkBwB,QAAlB,GAA2B,KAAKD,OAAhC;AACA,iBAAKD,OAAL,CAAaK,KAAb,IAAoB,IAApB;AACC,gBAAME,MAAM,GAAG,KAAKP,OAAL,CAAaQ,OAAb,CAAqB,IAArB,CAAf;;AACD,gBAAID,MAAM,GAAG,CAAC,CAAd,EAAiB;AACf,mBAAKP,OAAL,CAAaS,MAAb,CAAoBF,MAApB,EAA4B,CAA5B;AACD;;AACD,iBAAK7B,YAAL,CAAkByB,QAAlB,GAA2B,KAAKH,OAAhC;AACA,iBAAKgB,UAAL,GAAkB,IAAI,0EAAJ,CAAuB,KAAKtC,YAAL,CAAkBwB,QAAzC,CAAlB;AACA,iBAAKW,YAAL,GAAkB,IAAlB;AACE,+DAAKjB,IAAL,CACE,YADF,EAEE,uCAFF,EAGE,SAHF;AAKH,WAhBC,MAgBG;AACH,iBAAKiB,YAAL,GAAkB,KAAlB;AACA,+DAAKjB,IAAL,CACE,aADF,EAEE,kCAFF,EAGE,SAHF;AAKA,iBAAKS,KAAL,GAAWA,KAAX;AACA,iBAAKS,YAAL,GAAkB,IAAlB;AACD;AACF;;;uCACW;AACV,eAAKE,UAAL,GAAkB,IAAI,0EAAJ,CAAuB,KAAKtC,YAAL,CAAkByB,QAAzC,CAAlB;AACD;;;uCACW;AACV,eAAKU,YAAL,GAAkB,KAAlB;AACA,eAAKG,UAAL,GAAkB,IAAI,0EAAJ,CAAuB,KAAKtC,YAAL,CAAkByB,QAAzC,CAAlB;AACA,6DAAKP,IAAL,CACE,YADF,EAEE,6BAFF,EAGE,SAHF;AAKD;;;;;;;uBAhEYe,iB,EAAiB,+I;AAAA,K;;;YAAjBA,iB;AAAiB,qC;AAAA;AAAA;0EACjB,wE,EAAc,I;;0EACd,8D,EAAS,I;;;;;;;;;;;;;;;;;;ACbtB;;AACI;;AACE;;AACE;;AACE;;AACE;;AACI;;AACE;;AACE;;AACA;;AAAgC;AAAA,mBAAS,IAAAQ,OAAA,EAAT;AAAkB,WAAlB;;AAAyC;;AAAkB;;AAC3F;;AAAwB;;AAAwC;;AAClE;;AACF;;AACJ;;AACA;;AACE;;AACI;;AACE;;AACI;;AACA;;AAWF;;AACF;;AACE;;AACC;;AACH;;AACA;;AACE;;AACC;;AACH;;AACA;;AACI;;AACC;;AACH;;AACF;;AACA;;AAEF;;AACA;;AACF;;AACJ;;AACF;;AACF;;AACF;;AACF;;AACF;;AACA;;;;AA/CuD;;AAAA;;AAEb;;AAAA;;AAMT;;AAAA;;AA2BI;;AAAA;;AACP;;AAAA;;AAGC;;AAAA;;AAQhB;;AAAA;;;;;;;;;sED5CJR,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACT3C,kBAAQ,EAAE,gBADD;AAETC,qBAAW,EAAE,6BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKmB,Q;;;;;;gBAC3B,uD;iBAAU,wE,EAAc;AAAC,sBAAQ;AAAT,W;;;gBACxB,uD;iBAAU,8D,EAAS;AAAC,sBAAQ;AAAT,W;;;gBAGnB;;;;;;;;;;;;;;;;;;;;AEhBH;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMkD,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAJ;AAAA,KADZ;;;;;;;;;;;;;;;;;ACVA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaG,e;AAGX,iCAAc;AAAA;;AAFd,aAAAvB,QAAA,GAAa,EAAb;AACA,aAAAD,QAAA,GAAa,EAAb;AACiB;;;;mCAENyB,I,EAAI;AACd,eAAKxB,QAAL,CAAcG,IAAd,CAAmBqB,IAAnB;AACC,iBAAO,gDAAG,IAAH,CAAP;AACH;;;;;;;uBARYD,e;AAAe,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBAFd;;;;;sEAEDA,e,EAAe;cAH3B,wDAG2B;eAHhB;AACVE,oBAAU,EAAE;AADF,S;AAGgB,Q","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'to-do-app';\n}\n","<app-create-to-do></app-create-to-do>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { MatTableModule } from \"@angular/material/table\";\nimport { MatInputModule } from '@angular/material/input'\nimport { MatPaginatorModule } from '@angular/material/paginator'\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner'\nimport { MatSortModule } from '@angular/material/sort'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AppComponent } from './app.component';\nimport { CreateToDoComponent } from './create-to-do/create-to-do.component';\nimport { ToDoListComponent } from './to-do-list/to-do-list.component';\nimport { DoneListComponent } from './done-list/done-list.component';\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { TodoTaskService } from 'src/services/todo-task.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CreateToDoComponent,\n    ToDoListComponent,\n    DoneListComponent\n  ],\n  imports: [\n    BrowserAnimationsModule,\n    BrowserModule,\n    FormsModule, \n    ReactiveFormsModule,\n    MatInputModule, \n    MatPaginatorModule, \n    MatProgressSpinnerModule, \n    MatSortModule, \n    MatTableModule\n  ],\n  providers: [\n    TodoTaskService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, ViewChild,OnInit} from '@angular/core';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControl,\n} from \"@angular/forms\";\nimport Swal from \"sweetalert2\";\nimport { TodoTaskService } from 'src/services/todo-task.service';\n\n@Component({\n  selector: 'app-create-to-do',\n  templateUrl: './create-to-do.component.html',\n  styleUrls: ['./create-to-do.component.scss']\n})\nexport class CreateToDoComponent implements OnInit {\n  taskForm: FormGroup;\n  submitted: boolean = false;\n  showToDoList: boolean = false;\n  showCreateToDo:boolean =true;\n  newTask:boolean=false;\n  constructor( private formBuilder: FormBuilder,\n    private _taskService:TodoTaskService) { }\n\n  ngOnInit() {\n    this.taskForm = this.formBuilder.group({\n      taskName:new FormControl(\"\", [Validators.required]),\n      taskDescription: new FormControl(\"\",Validators.compose([Validators.required, Validators.maxLength(250)])),\n      repeatingTask: new FormControl(\"\", [Validators.required])\n    });\n  }\n  onSubmit(){\n    this.submitted = true;\n    if(this.submitted && this.taskForm.valid){\n      this._taskService.createTask(this.taskForm.value).subscribe((isCreated)=>{\n        if(isCreated){\n          Swal.fire(\n            'Task Created!',\n            'Your todo task is added in todo list.',\n            'success'\n          )\n    this.taskForm.reset();\n    this.submitted=false;\n     this.showToDoList=true;\n     this.showCreateToDo=false;\n        }\n      });\n    }\n  }\n  addNewTask(){\n    this.showToDoList=false;\n    this.showCreateToDo=true;\n  }\n}\n","<div class=\"main-content\" *ngIf=\"showCreateToDo\">\n<div class=\"container-fluid\">\n    <div class=\"card shadow mb-4\">\n        <div class=\"card-header py-3\">\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <h6 class=\"m-0 font-weight-bold text-primary\">\n                                Create ToDo\n                            </h6>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"card-body\">\n            <form [formGroup]=\"taskForm\">\n                <div class=\"usr_profile_inrmain\"> \n                    <div class=\"row\">\n                        <div class=\"form-group col-12\">\n                            <div class=\"usr_profile_biodata\">\n                                <label>Task Name</label>\n                                <div class=\"input-group\">\n                                    <input class=\"form-control\" type=\"text\" name=\"taskName\" formControlName=\"taskName\" (blur)=\"onSubmit()\"/>\n                                </div>\n                                <div *ngIf=\"submitted && taskForm.controls.taskName.errors\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"taskForm.controls.taskName.errors.required\">\n                                    Task Name is required.\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"form-group col-md-12\">\n                            <label for=\"body\">Task Description</label>\n                            <div class=\"input-group\">\n                                <textarea type=\"text\" row=\"3\" id=\"body\" class=\"form-control\" formControlName=\"taskDescription\"\n                                    placeholder=\"\" (blur)=\"onSubmit()\"></textarea>\n                                <div *ngIf=\"submitted && taskForm.controls.taskDescription.errors\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"taskForm.controls.taskDescription.errors.required\">\n                                        Task Description is required\n                                    </div>\n                                    <div *ngIf=\"taskForm.controls.taskDescription.errors.maxlength\">\n                                        Task Description can be max 250 characters long.\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"form-group col-12\">\n                            <div class=\"usr_profile_biodata\">\n                                <label> Repeating Task </label>\n                                <div class=\"input-group\">\n                                    <select class=\"form-control\" formControlName=\"repeatingTask\" (change)=\"onSubmit()\">\n                                        <option value=\"\" selected disabled hidden>Choose here</option>\n                                        <option value=\"Y\">Y</option>\n                                        <option value=\"N\">N</option>\n                                    </select>\n                                </div>\n                                <div *ngIf=\"submitted && taskForm.controls.repeatingTask.errors\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"taskForm.controls.repeatingTask.errors.required\">\n                                        Repeating Task is required.\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n</div>\n<app-to-do-list *ngIf=\"showToDoList\" (newTask)=\"addNewTask()\"></app-to-do-list>\n\n    ","import { Component, OnInit,Input, Output,EventEmitter } from '@angular/core';\nimport { TodoTaskService } from 'src/services/todo-task.service';\n\n@Component({\n  selector: 'app-done-list',\n  templateUrl: './done-list.component.html',\n  styleUrls: ['./done-list.component.scss']\n})\nexport class DoneListComponent implements OnInit {\n @Input() index:number;\n @Output() showToDoComp =new EventEmitter();\n allToDo:any=[];\n  allDone:any=[];\n  constructor(private _taskService:TodoTaskService) { }\n  ngOnInit() {\n    this.allDone=this._taskService.doneList;\n    this.allToDo=this._taskService.toDoList;\n    this.createToDo(this.index)\n  }\n  createToDo(index){\n    this.allToDo.push(this.allDone[index]);\n    this._taskService.toDoList=this.allToDo;\n    this.allDone[index]=null;\n     const indexT = this.allDone.indexOf(null);\n    if (indexT > -1) {\n      this.allDone.splice(indexT, 1);\n    }\n    this._taskService.doneList=this.allDone;\n    this.showToDoComp.emit();\n  }\n}\n","import { Component, ViewChild,OnInit,Output,EventEmitter} from '@angular/core';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {MatTableDataSource} from '@angular/material/table';\nimport { TodoTaskService } from 'src/services/todo-task.service';\nimport Swal from \"sweetalert2\";\n@Component({\n  selector: 'app-to-do-list',\n  templateUrl: './to-do-list.component.html',\n  styleUrls: ['./to-do-list.component.scss']\n})\nexport class ToDoListComponent implements OnInit {\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\n  displayedColumns: string[] = ['isDone','taskName','taskDescription','repeatingTask'];\n  dataSource: MatTableDataSource<any>;\n  @Output() newTask = new EventEmitter();\n  toDoList:any=[];\n  showDoneList:boolean=false;\n  index:number;\n  showDoneComp:boolean=false;\n  constructor(private _taskService:TodoTaskService) { }\n  allToDo:any=[];\n  allDone:any=[];\n  isActive:boolean=false;\n  ngOnInit(): void {\n    this.allDone=this._taskService.doneList;\n    this.allToDo=this._taskService.toDoList;\n    this.dataSource = new MatTableDataSource(this.allToDo);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n  addTask(){\n  this.newTask.emit();\n  }\n  doneTask(index){\n    this.showDoneComp=false;\n    if(!this.showDoneList){\n    this.allDone.push(this.allToDo[index]);\n    this._taskService.doneList=this.allDone;\n    this.allToDo[index]=null;\n     const indexT = this.allToDo.indexOf(null);\n    if (indexT > -1) {\n      this.allToDo.splice(indexT, 1);\n    }\n    this._taskService.toDoList=this.allToDo;\n    this.dataSource = new MatTableDataSource(this._taskService.doneList);\n    this.showDoneList=true;\n      Swal.fire(\n        'Task Done!',\n        'Your todo task is added in Done list.',\n        'success'\n      )\n  }else{\n    this.showDoneList=false;\n    Swal.fire(\n      'Task  TODO!',\n      'Your task is added in ToDo list.',\n      'success'\n    )\n    this.index=index;\n    this.showDoneComp=true;\n  }\n}\nshowToDoComp(){\n  this.dataSource = new MatTableDataSource(this._taskService.toDoList);\n}\nbackToDoList(){\n  this.showDoneList=false;\n  this.dataSource = new MatTableDataSource(this._taskService.toDoList);\n  Swal.fire(\n    'ToDo List!',\n    'You are going to ToDo List.',\n    'success'\n  )\n}\n}\n","<div class=\"main-content\">\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-lg-12 col-md-12\">\n          <div class=\"card\">\n            <div class=\"card-header card-header-primary\">\n                <div class=\"row\">\n                  <div class=\"col-md-12\">\n                    <i class=\"material-icons cutom back\" *ngIf=\"showDoneList\" (click)=\"backToDoList()\" title=\"Back to ToDo\">fast_rewind</i>\n                    <i class=\"material-icons cutom\" (click)=\"addTask()\" title=\"Add New Task\">add_circle_outline</i>\n                    <h4 class=\"card-title\"> {{showDoneList?\"Done List\":\"ToDo List\"}}</h4>\n                  </div>\n                </div>\n            </div>\n            <div class=\"card-body table-responsive\">\n              <div class=\"mat-elevation-z8\">\n                  <table mat-table [dataSource]=\"dataSource\" class=\"table-hover\" matSort>\n                    <ng-container matColumnDef=\"isDone\">\n                        <th mat-header-cell *matHeaderCellDef> {{showDoneList?\"UnDone\":\"Done\"}} </th>\n                        <td mat-cell *matCellDef=\"let task let i=index\">\n                            <div class=\"form-check\">\n                                <label class=\"form-check-label\">\n                                  <input class=\"form-check-input\" type=\"checkbox\" value=\"\" *ngIf=\"!showDoneList\" (change)=\"doneTask(i)\">\n                                  <input class=\"form-check-input\" type=\"checkbox\" value=\"\" *ngIf=\"showDoneList\" (change)=\"doneTask(i)\">\n                                  <span class=\"form-check-sign\">\n                                    <span class=\"check\"></span>\n                                  </span>\n                                </label>\n                              </div>\n                          </td>\n                      </ng-container>\n                    <ng-container matColumnDef=\"taskName\">\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header> Task Name </th>\n                       <td mat-cell *matCellDef=\"let task\"> {{task.taskName}} </td> \n                    </ng-container>\n                    <ng-container matColumnDef=\"taskDescription\">\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header> Task Description</th>\n                       <td mat-cell *matCellDef=\"let task\"> {{task.taskDescription}} </td>\n                    </ng-container>\n                    <ng-container matColumnDef=\"repeatingTask\">\n                        <th mat-header-cell *matHeaderCellDef mat-sort-header>Repeating Task </th>\n                         <td mat-cell *matCellDef=\"let task\"> {{task.repeatingTask}} </td>\n                      </ng-container>\n                    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\">\n                    </tr>\n                  </table>\n                  <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator>\n                </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <app-done-list *ngIf=\"showDoneComp\" [index]=\"index\" (showToDoComp)=\"showToDoComp()\"></app-done-list>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoTaskService {\n  toDoList:any=[];\n  doneList:any=[];\n  constructor() { }\n\n  createTask(task): Observable<boolean> {\n   this.toDoList.push(task);\n    return of(true);\n}\n}\n"]}